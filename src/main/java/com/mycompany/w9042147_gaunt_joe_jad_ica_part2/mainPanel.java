/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.w9042147_gaunt_joe_jad_ica_part2;

import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author jwgau
 */
public class mainPanel extends javax.swing.JFrame {
    

    Order currentOrder = new Order();
    int itemPrice;

    DefaultListModel<Furniture> myModel = new DefaultListModel();

    /**
     * Creates new form mainPanel
     */
    public mainPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        quantityChair = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        typeOfWoodChair = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        chairID = new javax.swing.JTextField();
        armrestsChair = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        createChair = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        widthDesk = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        depthDesk = new javax.swing.JTextField();
        drawsDesk = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        idDesk = new javax.swing.JTextField();
        typeOfWoodDesk = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        deskPicture = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        quantityDesk = new javax.swing.JComboBox<>();
        createDesk = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        tableID = new javax.swing.JTextField();
        baseTypeTable = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        tableDiameter = new javax.swing.JSpinner();
        typeOfWoodTable = new javax.swing.JComboBox<>();
        quantityTable = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        createTable = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        myBasket = new javax.swing.JList<>();
        orderSummary = new javax.swing.JButton();
        price = new javax.swing.JTextField();
        clearOrder = new javax.swing.JButton();
        saveOrder = new javax.swing.JButton();
        loadOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        quantityChair.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", " " }));
        quantityChair.setToolTipText("Input Quantity");
        quantityChair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityChairActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("ID number");

        typeOfWoodChair.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oak", "Walnut" }));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Quantity");

        chairID.setText("Enter ID number");
        chairID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chairIDMouseClicked(evt);
            }
        });
        chairID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chairIDActionPerformed(evt);
            }
        });

        armrestsChair.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        armrestsChair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                armrestsChairActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Add armrests");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setText("Display price");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setText("Type of wood");

        jLabel13.setBackground(new java.awt.Color(0, 51, 255));
        jLabel13.setText("Chair picture here");

        createChair.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        createChair.setText("CREATE CHAIR");
        createChair.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createChairMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14))
                            .addGap(51, 51, 51)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(quantityChair, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(armrestsChair, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(typeOfWoodChair, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chairID, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createChair, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(armrestsChair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityChair, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeOfWoodChair, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chairID, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(createChair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        widthDesk.setText("Width");
        widthDesk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                widthDeskMouseClicked(evt);
            }
        });
        widthDesk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthDeskActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Display price");

        depthDesk.setText("Depth");
        depthDesk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                depthDeskMouseClicked(evt);
            }
        });
        depthDesk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depthDeskActionPerformed(evt);
            }
        });

        drawsDesk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Enter width");

        idDesk.setText("Enter ID number");
        idDesk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                idDeskMouseClicked(evt);
            }
        });
        idDesk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idDeskActionPerformed(evt);
            }
        });

        typeOfWoodDesk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oak", "Walnut" }));
        typeOfWoodDesk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeOfWoodDeskActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Type of wood");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Amount of draws");

        deskPicture.setBackground(new java.awt.Color(0, 51, 255));
        deskPicture.setText("Desk picture here");
        deskPicture.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                deskPictureComponentShown(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Quantity");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("ID number");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Enter depth");

        quantityDesk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        quantityDesk.setToolTipText("Input Quantity");
        quantityDesk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityDeskActionPerformed(evt);
            }
        });

        createDesk.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        createDesk.setText("CREATE DESK");
        createDesk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createDeskMouseClicked(evt);
            }
        });
        createDesk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDeskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createDesk, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeOfWoodDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawsDesk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idDesk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(widthDesk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(depthDesk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quantityDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addComponent(deskPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeOfWoodDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(drawsDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(widthDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(depthDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(deskPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(createDesk, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        tableID.setText("Enter ID number");
        tableID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableIDMouseClicked(evt);
            }
        });
        tableID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableIDActionPerformed(evt);
            }
        });

        baseTypeTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Wooden", "Chrome" }));
        baseTypeTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseTypeTableActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel21.setText("Type of wood");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel18.setText("Base type");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel19.setText("Quantity");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel22.setText("Enter diameter");

        tableDiameter.setModel(new javax.swing.SpinnerNumberModel(50, 50, 400, 10));
        tableDiameter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDiameterMouseClicked(evt);
            }
        });

        typeOfWoodTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oak", "Walnut" }));

        quantityTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", " " }));
        quantityTable.setToolTipText("Input Quantity");
        quantityTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTableActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setText("ID number");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setText("Display price");

        jLabel9.setText("Table picture here");

        createTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        createTable.setText("CREATE TABLE");
        createTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(quantityTable, 0, 125, Short.MAX_VALUE)
                                    .addComponent(baseTypeTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(typeOfWoodTable, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tableID, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tableDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createTable, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(42, 42, 42)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseTypeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityTable, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeOfWoodTable, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableID, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(createTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        myBasket.setBackground(new java.awt.Color(242, 242, 242));
        myBasket.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        myBasket.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        myBasket.setMaximumSize(new java.awt.Dimension(3, 3));
        myBasket.setMinimumSize(new java.awt.Dimension(3, 3));
        myBasket.setVisibleRowCount(-1);
        myBasket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myBasketMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(myBasket);

        orderSummary.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        orderSummary.setText("ORDER SUMMARY");
        orderSummary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderSummaryMouseClicked(evt);
            }
        });

        price.setEditable(false);
        price.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        price.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        price.setText("Total Price: £0.00");
        price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        price.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                priceComponentShown(evt);
            }
        });
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        clearOrder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        clearOrder.setText("CLEAR ORDER");
        clearOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearOrderMouseClicked(evt);
            }
        });

        saveOrder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        saveOrder.setText("SAVE ORDER");
        saveOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveOrderMouseClicked(evt);
            }
        });

        loadOrder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        loadOrder.setText("LOAD ORDER");
        loadOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadOrderMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(orderSummary)))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(clearOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(saveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(loadOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(price)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(orderSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeOfWoodDeskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeOfWoodDeskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeOfWoodDeskActionPerformed

    private void quantityDeskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityDeskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityDeskActionPerformed

    private void idDeskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idDeskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idDeskActionPerformed

    private void widthDeskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthDeskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthDeskActionPerformed

    private void depthDeskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depthDeskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depthDeskActionPerformed

    private void chairIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chairIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chairIDActionPerformed

    private void armrestsChairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armrestsChairActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_armrestsChairActionPerformed

    private void quantityChairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityChairActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityChairActionPerformed

    private void tableIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableIDActionPerformed

    private void baseTypeTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseTypeTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_baseTypeTableActionPerformed

    private void quantityTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTableActionPerformed

    private void idDeskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idDeskMouseClicked
        // TODO add your handling code here:
        //This will set the text field to empty when the mouse is clicked
        idDesk.setText("");
    }//GEN-LAST:event_idDeskMouseClicked

    private void widthDeskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_widthDeskMouseClicked
        // TODO add your handling code here:
        //This will set the text field to empty when the mouse is clicked
        widthDesk.setText("");
    }//GEN-LAST:event_widthDeskMouseClicked

    private void depthDeskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_depthDeskMouseClicked
        // TODO add your handling code here:
        //This will set the text field to empty when the mouse is clicked
        depthDesk.setText("");
    }//GEN-LAST:event_depthDeskMouseClicked

    private void chairIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chairIDMouseClicked
        // TODO add your handling code here:
        //This will set the text field to empty when the mouse is clicked
        chairID.setText("");
    }//GEN-LAST:event_chairIDMouseClicked

    private void tableDiameterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDiameterMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tableDiameterMouseClicked

    private void tableIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableIDMouseClicked
        // TODO add your handling code here:
        //This will set the text field to empty when the mouse is clicked
        tableID.setText("");
    }//GEN-LAST:event_tableIDMouseClicked

    private void createDeskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDeskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createDeskActionPerformed

    private void createDeskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createDeskMouseClicked
        //This method is used for compilation of the desk object using the
        //user inputted constraints.

        //Below I carry out a simple check by calling the method isSizeValid()
        //if the method returns true, we know the size is valid
        //and can proceed with the method
        if (currentOrder.isSizeValid() == true) {
            try {
                //if order size is valid, use the parseInt method to convert 
                //the inputted text for ID into the correct integer format.
                int deskID = Integer.parseInt(idDesk.getText());
                int deskWidth = Integer.parseInt(widthDesk.getText());
                int deskDepth = Integer.parseInt(depthDesk.getText());

            } catch (NumberFormatException e) {
                //if an invalid constraint was entered, set the text to
                //invalid input.
                idDesk.setText("Invalid input!");
                widthDesk.setText("Invalid input!");
                depthDesk.setText("Invalid input!");
                
                

            }

            int deskID = Integer.parseInt(idDesk.getText());
            int deskWidth = Integer.parseInt(widthDesk.getText());
            int deskDepth = Integer.parseInt(depthDesk.getText());

            //Below I am converting our enum value typeOfWood to a String value
            String currentWood = typeOfWoodDesk.getSelectedItem().toString();
            typeOfWood wood = typeOfWood.valueOf(currentWood);

            //Below I am setting variables for quantity and number of draws, 
            //the +1 is required due to both values needing to start at 1, not 0
            int quantity = quantityDesk.getSelectedIndex() + 1;
            int numberOfDraws = drawsDesk.getSelectedIndex() + 1;

            //creating a new desk object using the inputted parameters
            Desk currentDesk = new Desk(deskID, wood, quantity, numberOfDraws,
                    deskWidth, deskDepth);

            //add the created object to the current order
            currentOrder.addProduct(currentDesk);

            //using a CellRenderer myModel which allows for product images
            //to be displayed in the correct grid format
            myBasket.setCellRenderer(new productsRenderer());
            myBasket.setModel(myModel);

            //adding the current desk object to myModel, this is how the object
            //is displayed in the basket
            myModel.addElement(currentDesk);

            //Logic for calculating the total price and displaying it in pounds
            //and pence, I use pence only inititally and convert to pounds by
            //casting the variable as a float and dividing by 100, then it is 
            //simply a matter of adding the £ sign before the value
            int totalPrice = currentOrder.getTotalPrice();
            float costInPounds = ((float) totalPrice / 100);
            String totalPriceString = String.format("%.02f", costInPounds);
            price.setText(" Total Price: "
                    + "£" + totalPriceString);

            System.out.printf("Current price is: %d\n",
                    currentDesk.calculatePrice());
            System.out.println(currentDesk.toString());
        } else {
            //if the isSizeValid method returns false, alert the user that
            //their basket is full
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "Basket full");
        }

    }//GEN-LAST:event_createDeskMouseClicked

    private void createChairMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createChairMouseClicked
        //This method is used for compilation of the chair object using the
        //user inputted constraints.

        //Below I carry out a simple check by calling the method isSizeValid()
        //if the method returns true, we know the size is valid
        //and can proceed with the method
        boolean armrests;
        if (currentOrder.isSizeValid() == true) {
            try {
                //if order size is valid, use the parseInt method to convert 
                //the inputted text for ID into the correct integer format.                
                int idChair = Integer.parseInt(chairID.getText());

            } catch (NumberFormatException e) {
                //if an invalid ID was entered, set the text to invalid input.            
                chairID.setText("Invalid input!");
                

            }

            int idChair = Integer.parseInt(chairID.getText());

            //Below I am converting our enum value typeOfWood to a String value
            String currentWood = typeOfWoodChair.getSelectedItem().toString();
            typeOfWood wood = typeOfWood.valueOf(currentWood);

            //Below I am setting variables for quantity and armrests 
            //the +1 is required due to both values needing to start at 1, not 0        
            int quantity = quantityChair.getSelectedIndex() + 1;
            int currentArmrests = armrestsChair.getSelectedIndex() + 1;

            if (currentArmrests == 2) {
                armrests = true;
            } else {
                armrests = false;
            }

            //creating chair object based on given constraints
            Chair currentChair = new Chair(idChair, wood, quantity, armrests);
            //adding the chair to the current order
            currentOrder.addProduct(currentChair);

            //setting the cellRenderer for my JList (basket) using myModel
            //before adding the current chair
            myBasket.setCellRenderer(new productsRenderer());
            myBasket.setModel(myModel);
            myModel.addElement(currentChair);

            //calculating price logic
            int totalPrice = currentOrder.getTotalPrice();
            float costInPounds = ((float) totalPrice / 100);
            String totalPriceString = String.format("%.02f", costInPounds);
            price.setText(" Total Price: "
                    + "£" + totalPriceString);
            System.out.println(currentChair.toString());
        } else {
            //if isSizeValid returns false, alert the user that the basket
            //is full
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "Basket full");
        }


    }//GEN-LAST:event_createChairMouseClicked

    private void createTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createTableMouseClicked
        //This method is used for compilation of the table object using the
        //user inputted constraints.

        //Below I carry out a simple check by calling the method isSizeValid()
        //if the method returns true, we know the size is valid
        //and can proceed with the method
        
        if (currentOrder.isSizeValid() == true) {

            try {
                //if order size is valid, use the parseInt method to convert 
                //the inputted text for ID into the correct integer format.                   
                int idTable = Integer.parseInt(tableID.getText());

            } catch (NumberFormatException e) {
                //if an invalid ID was entered, set the text to invalid input.             
                tableID.setText("Invalid input!");

            }

            //converting baseType enum to a String value    
            String currentBaseType = baseTypeTable.getSelectedItem().toString();
            baseType chosenBase = baseType.valueOf(currentBaseType);

            //setting quantity variable
            int quantity = quantityTable.getSelectedIndex() + 1;

            //converting typeOfWood enum to a String value
            String currentWood = typeOfWoodTable.getSelectedItem().toString();
            typeOfWood wood = typeOfWood.valueOf(currentWood);

            //using parseInt to convert ID and diameter to an integer value
            int idTable = Integer.parseInt(tableID.getText());
            int chosenDiameter = Integer.parseInt
        (tableDiameter.getValue().toString());

            //creating table object based on user entered constraints
            Table currentTable = new Table(idTable, wood, quantity,
                    chosenDiameter, chosenBase);

            System.out.println(currentTable.toString());
            System.out.println(currentTable.calculatePrice());

            //adding table to current order
            currentOrder.addProduct(currentTable);

            //displaying current table on JList using myModel
            myBasket.setCellRenderer(new productsRenderer());
            myBasket.setModel(myModel);
            myModel.addElement(currentTable);

            //logic for calculating price
            int totalPrice = currentOrder.getTotalPrice();
            float costInPounds = ((float) totalPrice / 100);
            String totalPriceString = String.format("%.02f", costInPounds);
            price.setText(" Total Price: "
                    + "£" + totalPriceString);

        } else {
            //if isSizeValid returned false, alert user that basket is full
            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "Basket full");
        }

    }//GEN-LAST:event_createTableMouseClicked

    private void orderSummaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderSummaryMouseClicked

        //outputs details of the current order to the console
        System.out.println(currentOrder.toString());
    }//GEN-LAST:event_orderSummaryMouseClicked

    private void deskPictureComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_deskPictureComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_deskPictureComponentShown

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void priceComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_priceComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_priceComponentShown

    private void clearOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearOrderMouseClicked

        //this method is used to clear all products from the order
        
        //confirm that the user would like to clear order
        JFrame f = new JFrame();
        int result = JOptionPane.showConfirmDialog
        (f, "Are you sure you want to clear the order? ",
                "Clear order",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (result == JOptionPane.YES_OPTION) {
            //if user confirms, call the clearAll method to remove all products
            currentOrder.clearAll();
            
            //remove all products from the order grid
            myModel.removeAllElements();
            
            //recalculate current price variable (0)
            int totalPrice = currentOrder.getTotalPrice();
            float costInPounds = ((float) totalPrice / 100);
            String totalPriceString = String.format("%.02f", costInPounds);
            price.setText(" Total Price: "
                    + "£" + totalPriceString);
            
        } else if (result == JOptionPane.NO_OPTION) {
            //if user does not confirm deletion output a message to the console
            
            System.out.println("Deletion cancelled.");
        }

    }//GEN-LAST:event_clearOrderMouseClicked

    private void myBasketMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myBasketMouseClicked
        // Logic for handling mouse presses on the order grid

        JFrame j = new JFrame();

        //if left mouse button was clicked, display product information 
        //using a JOptionPane
        if (evt.getButton() == MouseEvent.BUTTON1) {
            //working out which product the user is trying to interact with
            int index = myBasket.locationToIndex(evt.getPoint());
            JOptionPane.showMessageDialog(j, myModel.getElementAt(index),
                    "Product information", JOptionPane.INFORMATION_MESSAGE);

        }

        //if middle mouse button was clicked - wrong code update later
        if (evt.getButton() == MouseEvent.BUTTON2) {
            //working out which product the user is trying to interact with
            int index = myBasket.locationToIndex(evt.getPoint());
            JOptionPane.showMessageDialog(j, myModel.getElementAt(index));
        }

        //if right mouse button was clicked, delete the appropriate product
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //working out which product the user is trying to interact with
            int index = myBasket.locationToIndex(evt.getPoint());

            //confirm that the user would like to delete the product
            int result = JOptionPane.showConfirmDialog(j,
                    "Would you like to delete this product?", "Delete product",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                //removing product from myModel and currentOrder
                //remove element (index) from the order grid
                myModel.remove(index);
                
                //remove the object from currentOrder
                currentOrder.removeItem(index);
                
                //updating the total price variable
                int totalPrice = currentOrder.getTotalPrice();
                float costInPounds = ((float) totalPrice / 100);
                String totalPriceString = String.format("%.02f", costInPounds);
                price.setText(" Total Price: "
                        + "£" + totalPriceString);

            } else if (result == JOptionPane.NO_OPTION) {
                //if user did not confirm deletion, output message to the
               //console
                System.out.println("Deletion cancelled.");

            }
        }
    }//GEN-LAST:event_myBasketMouseClicked

    private void saveOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveOrderMouseClicked
        String userFile;
        try {
            // using JFileChooser to select location to save
            JFileChooser chooser = new JFileChooser();
            FileFilter filter = new FileNameExtensionFilter("DAT file", new String[] {"dat"});
            chooser.setFileFilter(filter);
            chooser.addChoosableFileFilter(filter);            
            int response = chooser.showSaveDialog(null);
            if (response == JFileChooser.APPROVE_OPTION) {
                //String userFile = chosen file path
                userFile = chooser.getSelectedFile().getAbsolutePath();

                FileOutputStream file = new FileOutputStream(userFile + ".dat");
                ObjectOutputStream output = new ObjectOutputStream(file);
                output.writeObject(currentOrder);
                output.close();
                file.close();
                System.out.println("Order saved");

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(mainPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(mainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveOrderMouseClicked

    private void loadOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadOrderMouseClicked

        String userFile;
        JFrame j = new JFrame();
        int result = JOptionPane.showConfirmDialog(j,
                "Loading an order will clear the current order,"
                + " would you like to proceed?", "Confirm load",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (result == JOptionPane.YES_OPTION) {

            currentOrder.clearAll();
            myModel.removeAllElements();

            try {

                //using JFileChooser to locate the required file
                JFileChooser chooser = new JFileChooser();

                //creating a filter to default to .dat files
                FileFilter filter = new FileNameExtensionFilter
                ("DAT file", new String[]{"dat"});
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);

                //opening JFileChooser window
                int response = chooser.showOpenDialog(null);

                //if the user loads a file, carry out the logic to load order
                if (response == JFileChooser.APPROVE_OPTION) {
                    //String userFile = chosen file path
                    userFile = chooser.getSelectedFile().getAbsolutePath();
                    FileInputStream fileInput = new FileInputStream(userFile);
                    ObjectInputStream input = new ObjectInputStream(fileInput);
                    currentOrder = (Order) input.readObject();
                    myBasket.setCellRenderer(new productsRenderer());
                    myBasket.setModel(myModel);

                    //repopulating the order grid with the appropriate products
                    for (int i = 0; i < currentOrder.getSize(); i++) {
                        Furniture furniture = currentOrder.getProducts().get(i);
                        myModel.addElement(furniture);
                    }
                    System.out.println("Order load succesful");
                    input.close();
                    fileInput.close();

                    //updating the current price to match the loaded order
                    int totalPrice = currentOrder.getTotalPrice();
                    float costInPounds = ((float) totalPrice / 100);
                    String totalPriceString = String.format
                    ("%.02f", costInPounds);
                    price.setText(" Total Price: "
                            + "£" + totalPriceString);
                } else {
                    //Display error message stating load was not succesful 
                    int loadCancelled = JOptionPane.showConfirmDialog(j,
                            "File not loaded",
                            "Loading cancelled",
                            JOptionPane.DEFAULT_OPTION,
                            JOptionPane.WARNING_MESSAGE);

                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(mainPanel.class.getName()).log(Level.SEVERE,
                        null, ex);
            } catch (IOException ex) {
                Logger.getLogger(mainPanel.class.getName()).log(Level.SEVERE,
                        null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(mainPanel.class.getName()).log(Level.SEVERE,
                        null, ex);
            }
        } else {
            System.out.println("Loading cancelled");
        }
        //error message if empty order or invalid file type was loaded
        if (currentOrder.getSize() == 0) {
            int loadFailure = JOptionPane.showConfirmDialog(j,
                    "File was not loaded succesfully,"
                            + " please ensure you are loading a .dat file"
                            + " created within this software"
                            + " that contains products.",
                    "Error loading file",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.WARNING_MESSAGE);

        }

    }//GEN-LAST:event_loadOrderMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainPanel().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> armrestsChair;
    private javax.swing.JComboBox<String> baseTypeTable;
    private javax.swing.JTextField chairID;
    private javax.swing.JButton clearOrder;
    private javax.swing.JButton createChair;
    private javax.swing.JButton createDesk;
    private javax.swing.JButton createTable;
    private javax.swing.JTextField depthDesk;
    private javax.swing.JLabel deskPicture;
    private javax.swing.JComboBox<String> drawsDesk;
    private javax.swing.JTextField idDesk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadOrder;
    private javax.swing.JList<Furniture> myBasket;
    private javax.swing.JButton orderSummary;
    private javax.swing.JTextField price;
    private javax.swing.JComboBox<String> quantityChair;
    private javax.swing.JComboBox<String> quantityDesk;
    private javax.swing.JComboBox<String> quantityTable;
    private javax.swing.JButton saveOrder;
    private javax.swing.JSpinner tableDiameter;
    private javax.swing.JTextField tableID;
    private javax.swing.JComboBox<String> typeOfWoodChair;
    private javax.swing.JComboBox<String> typeOfWoodDesk;
    private javax.swing.JComboBox<String> typeOfWoodTable;
    private javax.swing.JTextField widthDesk;
    // End of variables declaration//GEN-END:variables
}
